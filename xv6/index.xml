<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xv6 lab on 此时此刻</title>
    <link>http://shangc1016.github.io/xv6/</link>
    <description>Recent content in xv6 lab on 此时此刻</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://shangc1016.github.io/xv6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lab1: xv6 &amp; unix utilities</title>
      <link>http://shangc1016.github.io/xv6/1.lab1/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://shangc1016.github.io/xv6/1.lab1/</guid>
      <description>配置 环境：ubuntu20.04
跟着xv6-riscv-fall19做的：https://github.com/mit-pdos/xv6-riscv-fall19
Lab: Xv6 and Unix utilities：https://pdos.csail.mit.edu/6.828/2019/labs/util.html
安装依赖：
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu clone代码：
git clone git@github.com:mit-pdos/xv6-riscv-fall19.git # 然后检查一下分支 git branch -a # 发现对应所有的几个实验，都有一个分支。 # 要做哪个实验，直接check进入，完成之后，`make grade`评分 # 如果哪个 test point没过，会有对应的xxx.out日志文件打印相关信息方便debug。 测试环境：
make qemu qemu-system-riscv64 --version # 在一个xv6目录下 make qemu-gdb # 打开新的终端，同样目录下 gdb # 发现有错 Undefined item: &amp;#34;riscv:rv64&amp;#34;. # 然后发现需要risc-gdb没有弄好，需要riscv的gdb，或者可以用8.3.1以上的gdb。 启动 首先在kernel.ld这个链接脚本中设置了起始的地址为0x80000000，这个地址也是qemu中首先跳转执行的地址。对应到源码中是kernel/entry.S，可以看到entry.S代码给每个硬件线程设置好sp寄存器，然后跳转到start。
_entry: # set up a stack for C.</description>
    </item>
    
    <item>
      <title>xv6的trap机制</title>
      <link>http://shangc1016.github.io/xv6/2.trap/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://shangc1016.github.io/xv6/2.trap/</guid>
      <description>xv6的trap机制 syscall相关的riscv寄存器： stvec：ecall 指令跳转到这儿执行，这个寄存器存放的是trampoline的地址；trampline汇编代码是用户空间进如内核空间的代码 sepc：ecall指令把用户空间的pc指针保存在此 scause：ecall将其设置为8，表示一个系统调用 sscratch： trapframe的地址 sapt（S-mode address translation and protection）：寄存器保存当前的页表基址 a0-a7：系统调用的参数 ra：返回地址 a0：返回值 a7：syscall的号码 tp：当前cpu线程号 Sv39地址翻译 可以看到，虚拟地址用到了64位中的低39位，即最大的虚拟地址空间0x4000000000
以write为例，说明系统调用的过程： write() trampoline / uservec usertrap() syscall() sys_write() usertrapret() trampoline / userret write()返回 以sh.c中的write系统调用为例子说明：
首先查看sh.c的objdump代码sh.asm，查看到write函数直接调用的是user/usys.S的write函数，并且地址是0000000000000d6a，然后进入gdb调试。 在执行ecall指令之前，查看各个寄存器的值，包括pc、sapt、sepc、stvec、scause、sscratch以及a0 然后si单步执行ecall，进入到kernel/trampoline.S执行， 首先，把sscratch寄存器与a0寄存器的值交换，然后此时a0寄存器就是trapframe的地址，即要把当前进程的寄存器保存到a0寄存器所存的地址对应的页表中。 最后跳转到进程结构体p-&amp;gt;tf-&amp;gt;kernel_trap处执行，（这个在kernel/trap.c中usertrapret中设置进程的内核trap处理函数为usertrap） 然后进入kernel/trap.c的usertrap执，因为已经进入内核，首先在函数中切换中断处理为kernelvec 判断sscause寄存器的值是否为8，如果是8，就说明是来自用户空间的syscall。然后把寄存器epc的值保存到当前进程结构体中，并且epc+4，即反悔的时候直接执行ecall的下一条指令。 最后调用syscall()，根据寄存器a7选择相应的系统调用处理函数，最后把返回值置给寄存器a0，最后返回。 首先回到usertrapret函数中，设置进程关于内核的一些参数，如内核satp、kernel_sp进程的内核栈地址，进程trap的处理函数等，最后跳转到trampoline的userret处执行，重新从trapframe中把各个寄存器数据回复到物理的寄存器上，然后返回用户进程。 以initcode的系统调用为例： 执行ecall： 进入usertrap 设置stvec寄存器为kernelvec，表示已经进入内核，相应的中断处理要由内核完成。 判断scause寄存器的值，如果是8，表示syscall，先把epc+4，即返回的时候直接执行ecall的下一条指令 执行syscall函数，根据a7寄存器执行sys_xxx，返回值放在a0寄存器 进入usertrapret 关中断，写stvec寄存器为trampoline的userret。当当前不处理其他的中断，唯一处理的是进程从内核返回用户态，使用的代码是trampoline中的userret。 设置好各种参数，包括设置epc为进程保存的epc、然后把sapt寄存器设置为当前进程的页表基址 最后执行trampoline中的userret，回复进程现场，返回到用户态，继续执行ecall的下一条指令 参考 gdb调试：gdb调试有一个.gdbinit ，可以吧进入gdb之后的固定配置写到里面。执行命令gdb。首先执行这些命令。 进程优先级：通过nice 调整，nice的取值-20-19，数字越大，优先级越低 taskset：绑定进程到某个CPU执行 </description>
    </item>
    
    <item>
      <title>lab2: Simple xv6 shell</title>
      <link>http://shangc1016.github.io/xv6/3.lab2/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://shangc1016.github.io/xv6/3.lab2/</guid>
      <description>Simple xv6 shell 写一个xv6的shell，可以处理输入输出、重定向、管道。
shell文件应该位于user/nsh.c，然后更新makefile，自己实现的shell中的prompt应该使用符号@，以便于和原本的shell的$区分。
hints 不要使用动态内存分配如malloc，只能使用局部变量以及全局变量。（但是这个感觉有点骗测试的样子orz） 可以做出一些强制限制，比如命令的长度、参数的个数、每个参数的长度等（便于静态声明变量） nsh的测试文件为testsh，运行方式为testsh nsh 不用merge之前的实验，也基本用不到之前的代码。 不用实现testsh中没有的测试点，比如对括号以及引用的解析 参考K&amp;amp;R的C书， 比如5.12节的gettoken很有用 xv6的shell复杂的多，可以借鉴。复用代码须注释说明 可以使用用户空间的库user/ulib.c 及时关闭不使用的文件描述符 所有的系统调用需要检查返回值，是否正确 testsh会重定向shell的标准输出，在shell中把error以及debug信息输出到fd 2。 关注testsh中的one函数，可能会有用。 intend： 这个lab主要应该还是让用一用syscall，理解syscall过程。然后多用一用fork、exec、pipe，redirect等等吧。那些东西是父子进程共享的，那些是独有的。然后看代码。
管道：|
重定向：&amp;gt;、&amp;lt;
对于管道和重定向同时存在的情况，管道的优先级要高，那就是先处理管道、再处理重定向。
管道把命令分成了两部分，先执行管道左侧的命令，然后创建管道，写入数据；再执行右侧命令，从管道读数据，处理。 重定向负责把标准输入、输出、错误重定向到某个文件？ 对于重定向输出，fork执行&amp;gt;左侧的命令的时候，设置重定向 对于重定向输入，fork执行&amp;lt;右侧的命令的时候，设置重定向 示例 echo hello there echo something &amp;gt; file.txt ls | grep READ grep lion &amp;lt; data.txt | wc &amp;gt; count echo echo hello | nsh find . b | xargs grep hello Bugs 遇到的第一个问题就是不太会处理字符串，然后也没有用sh.c中的其他函数。 第二个问题是不会读数据，最后发现构造的测试样例是每个命令以\n结尾。然后就是在读输入时，遇到\n就break，如果读到文件结束就退出，测试层序会多次调用nsh进程。 第三个问题就是我知道posix管道是半双工的，但是在父进程创建管道之后，写管道子进程没有关闭管道的读管道描述符；读管道子进程也没有关闭写管道描述符，然后造成了程序的undefined behavior，太蠢了。最后在ULK的page768找到解决方案。 最后一个坑是先写管道，写完之后要及时关闭写管道描述符，我只是在子进程中关闭了写管道描述符，但是在父进程中没有关（管道可以被多个进程读写、需要加锁保证数据可用），导致了后半段命令的子进程一直sleep，不能读到管道EOF，然后退出进程。 这个问题在源代码中反映为user/nsh.c中88-91行，debug之前是先两个wait，然后两个close。太蠢了。 xv6-book片段 fork和exec分成两步的原因就是在这两个系统调用中间可以插入一个IO重定向的部分。这样就能在不修改代码的情况下实现多个程序的连接 fork以及dup系统调用之后，父子进程对于同一个打开的文件描述符共享同一个文件偏移，因此下面的代码会输出hello,world到文件。这也是多个shell命令实现的方式。 2&amp;gt;&amp;amp;1：这个命令的意思是对于shell命令，把文件描述符2设置为文件描述符1的复制，即 close（2）; dup(1); 这样做，可以让shell把标准输出和标准错误合并到同一个输出文件中。 管道pipe中，写管道结束之后，应该关闭管道的写一侧，否则管道的读一侧会一直阻塞。 </description>
    </item>
    
  </channel>
</rss>
